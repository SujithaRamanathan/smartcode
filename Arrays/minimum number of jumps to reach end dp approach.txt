Given an array of N integers arr[] where each element represents the max number of steps that can be made forward from that element. Find the minimum number of jumps to reach the end of the array (starting from the first element). If an element is 0, then you cannot move through that element.

Example 1:

Input:
N = 11 
arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9} 
Output: 3 
Explanation: 
First jump from 1st element to 2nd 
element with value 3. Now, from here 
we jump to 5th element with value 9, 
and from here we will jump to last. 





class Solution{
  public:
    int minJumps(int arr[], int n){
        int dp[n];
        // we have to create a dp array from index 1 since dp[o]= 0 always
        dp[0] = 0;
        for(int i=1;i<n;i++)
        dp[i] = INT_MAX;
        
        // finding out min no of jumps very easy
        for(int i=1;i<n;i++) {
            for(int j = 0;j<i;j++){ // inga they are cheking that if first element 0 na 
                if(dp[j]!=INT_MAX and i <= j + arr[j])
                dp[i] = min(dp[i] ,dp[j]+1);
            }
        }
      if(dp[n-1] != INT_MAX)
      return dp[n-1] ;  
      else
      return -1;
    }
};




O(n) approach

int minJumps(int arr[], int n){
        int maxr = arr[0];
        int step = arr[0];
        int jump = 1;
        
       if(n<=1) return 0;
       else if(arr[0] == 0) return -1;
       else {
            for(int i=1;i<n;i++){
                if(i==n-1){
                return jump;}
                maxr = max(maxr,i+arr[i]);
                step--;
                if(step == 0)
                 {
                 jump++;
                    
                 if(i>=maxr){
                    return -1;}
                    step = maxr - i;
                    
                  }
            }
        }
        